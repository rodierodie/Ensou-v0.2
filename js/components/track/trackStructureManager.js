/**
 * trackStructureManager.js
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π —Ç—Ä–µ–∫–∞
 */

import Component from '../component.js';
import store from '../../core/store.js';
import eventBus from '../../core/eventBus.js';
import trackStructureService from '../../models/trackStructure.js';
import { TrackBlock } from '../../models/sequence.js';

class TrackStructureManager extends Component {
  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π —Ç—Ä–µ–∫–∞
   * @param {HTMLElement} container - –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
   * @param {Object} options - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
   */
  constructor(container, options = {}) {
    super(container, {
      ...options,
      autoRender: false
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    this.trackStructure = trackStructureService.getTrackStructure();
    this.currentBlockIndex = trackStructureService.getCurrentBlockIndex();
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ store
    this.subscribeToStore(this.handleStateChange, ['trackStructure', 'currentBlockIndex']);
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    this.subscribeToEvent('blockAdded', this.handleBlockAdded.bind(this));
    this.subscribeToEvent('blockRemoved', this.handleBlockRemoved.bind(this));
    this.subscribeToEvent('blockRenamed', this.handleBlockRenamed.bind(this));
    this.subscribeToEvent('blockTonalityChanged', this.handleBlockTonalityChanged.bind(this));
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UI
    this.init();
  }
  
  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
   */
  init() {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π —Ç—Ä–µ–∫–∞');
    
    // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º UI
    this.render();
  }
  
  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
   */
  render() {
    if (!this.container) return;
    
    this.clearContainer();
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const title = this.createElement('div', {
      className: 'section-title',
      textContent: '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç—Ä–µ–∫–∞'
    });
    this.container.appendChild(title);
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    const toolbar = this.createToolbar();
    this.container.appendChild(toolbar);
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –±–ª–æ–∫–æ–≤
    const blocksContainer = this.createElement('div', {
      className: 'blocks-container'
    });
    
    // –°–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫–∏
    const structure = this.trackStructure.getAllBlocks();
    structure.forEach((block, index) => {
      const blockElement = this.createBlockElement(block, index);
      blocksContainer.appendChild(blockElement);
    });
    
    this.container.appendChild(blocksContainer);
  }
  
  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
   * @returns {HTMLElement} –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
   */
  createToolbar() {
    const toolbar = this.createElement('div', {
      className: 'structure-toolbar'
    });
    
    // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞
    const addButton = this.createElement('button', {
      className: 'add-block-button',
      textContent: '+ –ù–æ–≤—ã–π –±–ª–æ–∫',
      onClick: this.handleAddBlock.bind(this)
    });
    toolbar.appendChild(addButton);
    
    // –ö–Ω–æ–ø–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤—Å–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    const playAllButton = this.createElement('button', {
      className: 'play-all-button',
      textContent: '‚ñ∂ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –≤–µ—Å—å —Ç—Ä–µ–∫',
      onClick: this.handlePlayFullTrack.bind(this)
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫–∫–æ—Ä–¥—ã –≤ –±–ª–æ–∫–∞—Ö
    const hasChords = this.trackStructure.getAllBlocks().some(block => block.chords.length > 0);
    playAllButton.disabled = !hasChords;
    
    toolbar.appendChild(playAllButton);
    
    return toolbar;
  }
  
  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –±–ª–æ–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI
   * @param {Object} block - –û–±—ä–µ–∫—Ç –±–ª–æ–∫–∞
   * @param {number} index - –ò–Ω–¥–µ–∫—Å –±–ª–æ–∫–∞
   * @returns {HTMLElement} –≠–ª–µ–º–µ–Ω—Ç –±–ª–æ–∫–∞
   */
  createBlockElement(block, index) {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –±–ª–æ–∫–∞
    const blockElement = this.createElement('div', {
      className: 'track-block',
      dataset: { index: index, blockId: block.id }
    });
    
    // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –±–ª–æ–∫, –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å
    if (index === this.currentBlockIndex) {
      blockElement.classList.add('active-block');
    }
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –±–ª–æ–∫–∞ —Å –∏–º–µ–Ω–µ–º –∏ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
    const blockHeader = this.createElement('div', {
      className: 'block-header'
    });
    
    // –ò–º—è –±–ª–æ–∫–∞ (—Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    const blockName = this.createElement('span', {
      className: 'block-name',
      textContent: block.name,
      title: '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
      onClick: () => this.handleRenameBlock(index)
    });
    blockHeader.appendChild(blockName);
    
    // –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±–ª–æ–∫–∞
    const blockTonality = this.createElement('span', {
      className: 'block-tonality',
      textContent: block.tonality,
      title: '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏',
      onClick: () => this.handleChangeTonality(index)
    });
    blockHeader.appendChild(blockTonality);
    
    blockElement.appendChild(blockHeader);
    
    // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞–∫–∫–æ—Ä–¥–æ–≤ –±–ª–æ–∫–∞
    const chordsPreview = this.createElement('div', {
      className: 'block-chords-preview'
    });
    
    if (block.chords && block.chords.length > 0) {
      // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–µ–≤—å—é –∞–∫–∫–æ—Ä–¥–æ–≤
      const maxPreviewChords = 8; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–æ—Ä–¥–æ–≤ –¥–ª—è –ø—Ä–µ–≤—å—é
      const displayChords = block.chords.slice(0, maxPreviewChords);
      
      displayChords.forEach((chord, chordIndex) => {
        const chordBadge = this.createElement('span', {
          className: 'chord-badge',
          textContent: chord === 'PAUSE' ? 'ùÑΩ' : chord
        });
        chordsPreview.appendChild(chordBadge);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∞–∫–∫–æ—Ä–¥–∞–º–∏
        if (chordIndex < displayChords.length - 1) {
          const separator = this.createElement('span', {
            className: 'chord-separator',
            textContent: '‚Üí'
          });
          chordsPreview.appendChild(separator);
        }
      });
      
      // –ï—Å–ª–∏ –≤ –±–ª–æ–∫–µ –±–æ–ª—å—à–µ –∞–∫–∫–æ—Ä–¥–æ–≤, —á–µ–º –º—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, –¥–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ
      if (block.chords.length > maxPreviewChords) {
        const ellipsis = this.createElement('span', {
          className: 'chord-ellipsis',
          textContent: '...'
        });
        chordsPreview.appendChild(ellipsis);
      }
    } else {
      // –ï—Å–ª–∏ –±–ª–æ–∫ –ø—É—Å—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const emptyMessage = this.createElement('span', {
        className: 'empty-block-message',
        textContent: '–ù–µ—Ç –∞–∫–∫–æ—Ä–¥–æ–≤'
      });
      chordsPreview.appendChild(emptyMessage);
    }
    
    blockElement.appendChild(chordsPreview);
    
    // –ü–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫ –±–ª–æ–∫–∞
    const buttonPanel = this.createElement('div', {
      className: 'block-buttons'
    });
    
    // –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–ª–æ–∫–∞
    const loadButton = this.createElement('button', {
      className: 'block-load-button',
      textContent: '–ó–∞–≥—Ä—É–∑–∏—Ç—å',
      onClick: (e) => {
        e.stopPropagation();
        this.handleLoadBlock(index);
      }
    });
    buttonPanel.appendChild(loadButton);
    
    // –ö–Ω–æ–ø–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –±–ª–æ–∫–∞
    const playButton = this.createElement('button', {
      className: 'block-play-button',
      textContent: '‚ñ∂',
      disabled: !block.chords || block.chords.length === 0,
      onClick: (e) => {
        e.stopPropagation();
        this.handlePlayBlock(index);
      }
    });
    buttonPanel.appendChild(playButton);
    
    // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–ª–æ–∫–∞
    const deleteButton = this.createElement('button', {
      className: 'block-delete-button',
      textContent: '√ó',
      // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫, –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
      disabled: this.trackStructure.blocks.length <= 1,
      onClick: (e) => {
        e.stopPropagation();
        this.handleRemoveBlock(index);
      }
    });
    buttonPanel.appendChild(deleteButton);
    
    blockElement.appendChild(buttonPanel);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–ª–æ–∫–∞
    blockElement.addEventListener('click', (e) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–∫ –Ω–µ –±—ã–ª –ø–æ –∫–Ω–æ–ø–∫–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
      if (!e.target.closest('button') && 
          !e.target.closest('.block-name') && 
          !e.target.closest('.block-tonality')) {
        this.handleLoadBlock(index);
      }
    });
    
    return blockElement;
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞
   */
  handleAddBlock() {
    trackStructureService.addNewBlock();
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–ª–æ–∫–∞
   * @param {number} index - –ò–Ω–¥–µ–∫—Å –±–ª–æ–∫–∞
   */
  handleLoadBlock(index) {
    trackStructureService.loadBlockSequence(index);
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –±–ª–æ–∫–∞
   * @param {number} index - –ò–Ω–¥–µ–∫—Å –±–ª–æ–∫–∞
   */
  handlePlayBlock(index) {
    // –ü–æ–ª—É—á–∞–µ–º –±–ª–æ–∫
    const block = this.trackStructure.getBlockAt(index);
    if (!block || !block.chords || block.chords.length === 0) return;
    
    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    eventBus.publish('playCustomSequence', {
      sequence: block.chords,
      loop: true
    });
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤—Å–µ–≥–æ —Ç—Ä–µ–∫–∞
   */
  handlePlayFullTrack() {
    trackStructureService.trackStructure.playFullTrack();
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–ª–æ–∫–∞
   * @param {number} index - –ò–Ω–¥–µ–∫—Å –±–ª–æ–∫–∞
   */
  handleRemoveBlock(index) {
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    const block = this.trackStructure.getBlockAt(index);
    if (!block) return;
    
    if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –±–ª–æ–∫ "${block.name}"?`)) {
      trackStructureService.removeBlock(index);
    }
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –±–ª–æ–∫–∞
   * @param {number} index - –ò–Ω–¥–µ–∫—Å –±–ª–æ–∫–∞
   */
  handleRenameBlock(index) {
    // –ü–æ–ª—É—á–∞–µ–º –±–ª–æ–∫
    const block = this.trackStructure.getBlockAt(index);
    if (!block) return;
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∏–º—è
    const newName = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –±–ª–æ–∫–∞ (—Ñ–æ—Ä–º–∞—Ç: –±—É–∫–≤–∞+—Ü–∏—Ñ—Ä–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä A1, B2):', block.name);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–æ–¥
    if (newName && newName !== block.name && /^[A-Z][1-9](\d*)$/.test(newName)) {
      trackStructureService.renameBlock(index, newName);
    } else if (newName) {
      alert('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –±—É–∫–≤–∞+—Ü–∏—Ñ—Ä–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä A1, B2.');
    }
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–ª–æ–∫–∞
   * @param {number} index - –ò–Ω–¥–µ–∫—Å –±–ª–æ–∫–∞
   */
  handleChangeTonality(index) {
    // –ü–æ–ª—É—á–∞–µ–º –±–ª–æ–∫
    const block = this.trackStructure.getBlockAt(index);
    if (!block) return;
    
    // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π
    let tonalityOptions = '';
    Object.entries(window.TONALITY_DATA).forEach(([key, value]) => {
      tonalityOptions += `${key} (${value.name})\n`;
    });
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—É—é —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    const newTonality = prompt(
      `–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:\n${tonalityOptions}`, 
      block.tonality
    );
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–æ–¥
    if (newTonality && window.TONALITY_DATA[newTonality]) {
      trackStructureService.changeBlockTonality(index, newTonality);
    } else if (newTonality) {
      alert('–í—ã–±—Ä–∞–Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å.');
    }
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∞
   * @param {Object} data - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
   */
  handleBlockAdded(data) {
    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    this.render();
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —É–¥–∞–ª–µ–Ω–∏—è –±–ª–æ–∫–∞
   * @param {Object} data - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
   */
  handleBlockRemoved(data) {
    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    this.render();
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –±–ª–æ–∫–∞
   * @param {Object} data - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
   */
  handleBlockRenamed(data) {
    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    this.render();
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–ª–æ–∫–∞
   * @param {Object} data - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
   */
  handleBlockTonalityChanged(data) {
    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    this.render();
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–∑ store
   * @param {Object} state - –°–æ—Å—Ç–æ—è–Ω–∏–µ store
   * @param {string} changedProp - –ò–∑–º–µ–Ω–µ–Ω–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ
   */
  handleStateChange(state, changedProp) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (changedProp === 'trackStructure') {
      this.trackStructure = trackStructureService.getTrackStructure();
      this.render();
    } else if (changedProp === 'currentBlockIndex') {
      this.currentBlockIndex = state.currentBlockIndex;
      this.render();
    }
  }
}

export default TrackStructureManager;