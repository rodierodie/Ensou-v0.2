/**
 * modernSequencer.js
 * –ú–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ–∫–≤–µ–Ω—Å–æ—Ä–æ–º –∞–∫–∫–æ—Ä–¥–æ–≤—ã—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–π
 */

import Component from '../component.js';
import store from '../../core/store.js';
import eventBus from '../../core/eventBus.js';
import audioService from '../../services/audioService.js';

class ModernSequencer extends Component {
  /**
   * –°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–µ–∫–≤–µ–Ω—Å–æ—Ä–∞
   * @param {HTMLElement} container - –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
   * @param {HTMLElement} sequenceContainer - –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   * @param {Object} options - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
   */
  constructor(container, sequenceContainer, options = {}) {
    super(container, {
      ...options,
      autoRender: true
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    this.sequenceContainer = sequenceContainer;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    this.sequence = store.getSequence();
    this.isPlaying = store.getIsPlaying();
    this.currentIndex = -1;
    this.tempo = store.getTempo();
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ store
    this.subscribeToStore(this.handleStateChange, ['sequence', 'isPlaying', 'tempo']);
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    this.subscribeToEvent('chordPlaying', this.handleChordPlaying.bind(this));
  }
  
  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
   */
  render() {
    if (!this.container) return;
    
    this.clearContainer();
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const controlsContainer = this.createElement('div', {
      className: 'sequence-controls'
    });
    
    // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const mainControls = this.createElement('div', {
      className: 'main-sequence-controls'
    });
    
    // –ö–Ω–æ–ø–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    const playButton = this.createElement('button', {
      id: 'play-sequence',
      className: 'play-button',
      textContent: '‚ñ∂ –ü—Ä–æ–∏–≥—Ä–∞—Ç—å',
      disabled: this.isPlaying || this.sequence.length === 0,
      onClick: this.handlePlayClick.bind(this)
    });
    mainControls.appendChild(playButton);
    
    // –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    const stopButton = this.createElement('button', {
      id: 'stop-sequence',
      className: 'stop-button',
      textContent: '‚ñ† –°—Ç–æ–ø',
      disabled: !this.isPlaying,
      onClick: this.handleStopClick.bind(this)
    });
    mainControls.appendChild(stopButton);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    controlsContainer.appendChild(mainControls);
    
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const editControls = this.createElement('div', {
      className: 'edit-sequence-controls'
    });
    
    // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—É–∑—ã
    const addPauseButton = this.createElement('button', {
      id: 'add-pause',
      className: 'add-pause-button',
      textContent: '+ –ü–∞—É–∑–∞',
      onClick: this.handleAddPauseClick.bind(this)
    });
    editControls.appendChild(addPauseButton);
    
    // –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const clearButton = this.createElement('button', {
      id: 'clear-sequence',
      className: 'clear-button',
      textContent: '–û—á–∏—Å—Ç–∏—Ç—å',
      disabled: this.sequence.length === 0,
      onClick: this.handleClearClick.bind(this)
    });
    editControls.appendChild(clearButton);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    controlsContainer.appendChild(editControls);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    this.container.appendChild(controlsContainer);
    
    // –†–µ–Ω–¥–µ—Ä–∏–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    this.renderSequence();
  }
  
  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–∫–∫–æ—Ä–¥–æ–≤
   */
  renderSequence() {
    if (!this.sequenceContainer) return;
    
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    this.sequenceContainer.innerHTML = '';
    
    // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—É—Å—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    if (this.sequence.length === 0) {
      const placeholder = this.createElement('div', {
        className: 'timeline-placeholder',
        textContent: '–î–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–æ—Ä–¥—ã –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å'
      });
      this.sequenceContainer.appendChild(placeholder);
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–æ—Ä–¥–∞ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    this.sequence.forEach((chordName, index) => {
      const slotElement = this.createElement('div', {
        className: 'sequence-slot',
        dataset: { index: index }
      });
      
      // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º—ã–π –∞–∫–∫–æ—Ä–¥, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–ª–∞—Å—Å
      if (index === this.currentIndex && this.isPlaying) {
        slotElement.classList.add('current-playing');
      }
      
      // –ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫–æ—Ä–¥–∞
      const chordNameElement = this.createElement('div', {
        className: 'slot-chord'
      });
      
      // –ï—Å–ª–∏ —ç—Ç–æ –ø–∞—É–∑–∞, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–∏–º–≤–æ–ª
      if (chordName === 'PAUSE') {
        chordNameElement.textContent = 'ùÑΩ'; // –°–∏–º–≤–æ–ª –ø–∞—É–∑—ã
        chordNameElement.classList.add('pause-symbol');
      } else if (chordName === 'BLOCK_DIVIDER') {
        chordNameElement.textContent = '|'; // –°–∏–º–≤–æ–ª —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è –±–ª–æ–∫–æ–≤
        chordNameElement.classList.add('block-divider-symbol');
      } else {
        chordNameElement.textContent = chordName;
      }
      
      slotElement.appendChild(chordNameElement);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
      slotElement.addEventListener('click', () => {
        this.handleSlotClick(chordName, index);
      });
      
      // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
      const removeButton = this.createElement('div', {
        className: 'slot-remove',
        textContent: '√ó',
        onClick: (e) => {
          e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ –∞–∫–∫–æ—Ä–¥–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
          this.handleRemoveClick(index);
        }
      });
      slotElement.appendChild(removeButton);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ—Ç –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
      this.sequenceContainer.appendChild(slotElement);
    });
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
   */
  handlePlayClick() {
    store.setIsPlaying(true);
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
   */
  handleStopClick() {
    store.setIsPlaying(false);
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—É–∑—ã
   */
  handleAddPauseClick() {
    store.addChordToSequence('PAUSE');
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  handleClearClick() {
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å?')) {
      store.clearSequence();
    }
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Å–ª–æ—Ç—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   * @param {string} chordName - –ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫–æ—Ä–¥–∞
   * @param {number} index - –ò–Ω–¥–µ–∫—Å –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  handleSlotClick(chordName, index) {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–ª—è –ø–∞—É–∑ –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π –±–ª–æ–∫–æ–≤
    if (chordName === 'PAUSE' || chordName === 'BLOCK_DIVIDER') {
      return;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∞–∫–∫–æ—Ä–¥
    store.setCurrentChord(chordName);
    
    // –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∞–∫–∫–æ—Ä–¥
    audioService.playChord(chordName);
    
    // –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ
    eventBus.publish('sequenceChordClicked', {
      chordName,
      index
    });
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–æ—Ä–¥–∞
   * @param {number} index - –ò–Ω–¥–µ–∫—Å –∞–∫–∫–æ—Ä–¥–∞ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  handleRemoveClick(index) {
    store.removeChordFromSequence(index);
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è –∞–∫–∫–æ—Ä–¥–∞
   * @param {Object} data - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
   */
  handleChordPlaying(data) {
    this.currentIndex = data.index;
    this.updateCurrentPlaying();
  }
  
  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º–æ–≥–æ –∞–∫–∫–æ—Ä–¥–∞
   */
  updateCurrentPlaying() {
    // –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö —Å–ª–æ—Ç–æ–≤
    document.querySelectorAll('.sequence-slot').forEach(slot => {
      slot.classList.remove('current-playing');
    });
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ
    if (this.currentIndex >= 0 && this.isPlaying) {
      // –ù–∞—Ö–æ–¥–∏–º —Å–ª–æ—Ç —Å —Ç–µ–∫—É—â–∏–º –∏–Ω–¥–µ–∫—Å–æ–º
      const currentSlot = document.querySelector(`.sequence-slot[data-index="${this.currentIndex}"]`);
      if (currentSlot) {
        currentSlot.classList.add('current-playing');
        
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º, —á—Ç–æ–±—ã —Å–ª–æ—Ç –±—ã–ª –≤–∏–¥–∏–º—ã–º
        this.scrollToCurrentSlot();
      }
    }
  }
  
  /**
   * –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —Ç–µ–∫—É—â–µ–º—É –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º–æ–º—É —Å–ª–æ—Ç—É
   */
  scrollToCurrentSlot() {
    const currentSlot = document.querySelector('.sequence-slot.current-playing');
    if (!currentSlot || !this.sequenceContainer) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∏–¥–µ–Ω –ª–∏ —Å–ª–æ—Ç
    const containerRect = this.sequenceContainer.getBoundingClientRect();
    const slotRect = currentSlot.getBoundingClientRect();
    
    // –ï—Å–ª–∏ —Å–ª–æ—Ç –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏, –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º
    if (slotRect.left < containerRect.left || slotRect.right > containerRect.right) {
      // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
      const scrollLeft = currentSlot.offsetLeft - this.sequenceContainer.offsetWidth / 2 + currentSlot.offsetWidth / 2;
      this.sequenceContainer.scrollLeft = scrollLeft;
    }
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ store
   * @param {Object} state - –°–æ—Å—Ç–æ—è–Ω–∏–µ store
   * @param {string} changedProp - –ò–∑–º–µ–Ω–µ–Ω–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ
   */
  handleStateChange(state, changedProp) {
    let shouldRender = false;
    
    if (changedProp === 'sequence') {
      this.sequence = state.sequence;
      shouldRender = true;
    } else if (changedProp === 'isPlaying') {
      this.isPlaying = state.isPlaying;
      
      // –ï—Å–ª–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
      if (!this.isPlaying) {
        this.currentIndex = -1;
      }
      
      shouldRender = true;
    } else if (changedProp === 'tempo') {
      this.tempo = state.tempo;
    }
    
    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (shouldRender) {
      this.render();
    }
  }
}

export default ModernSequencer;